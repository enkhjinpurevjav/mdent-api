generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ---------- Enums ---------- */

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ApptStatus {
  SCHEDULED
  CHECKED_IN
  CANCELLED
  NO_SHOW
  COMPLETED
}

enum MediaKind {
  PHOTO
  XRAY
  DOC
  OTHER
}

enum InvoiceStatus {
  UNPAID
  PARTIAL
  PAID
  VOID
}

enum PayMethod {
  CASH
  CARD
  QPAY
  BANK_TRANSFER
  OTHER
}

/* ---------- Meta ---------- */

model Meta {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ---------- Org / People ---------- */

model Branch {
  id         String        @id @default(cuid())
  name       String
  code       String        @unique
  address    String?
  phone      String?
  rooms      Room[]
  doctors    Doctor[]
  patients   Patient[]
  invoices   Invoice[]
  // added back-relations:
  appointments Appointment[]
  encounters    Encounter[]

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Room {
  id        String   @id @default(cuid())
  name      String
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  // added back-relation:
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id           String        @id @default(cuid())
  fullName     String
  regNo        String?
  phone        String?
  email        String?
  branchId     String?
  branch       Branch?       @relation(fields: [branchId], references: [id])
  appointments Appointment[]
  encounters   Encounter[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Patient {
  id           String        @id @default(cuid())
  fullName     String
  regNo        String        @unique
  phone        String?
  email        String?
  birthDate    DateTime?
  gender       Gender?
  branchId     String?
  branch       Branch?       @relation(fields: [branchId], references: [id])
  historyBook  HistoryBook?
  appointments Appointment[]
  encounters   Encounter[]
  invoices     Invoice[]
  media        Media[]
  // added back-relations:
  chartNotes   ChartNote[]
  procedures   Procedure[]
  diagnoses    Diagnosis[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

/* Optional User */
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String?
  role      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ---------- Scheduling & Clinical ---------- */

model Appointment {
  id         String     @id @default(cuid())
  patientId  String
  doctorId   String
  branchId   String
  roomId     String?
  startsAt   DateTime
  endsAt     DateTime
  status     ApptStatus @default(SCHEDULED)
  notes      String?

  patient    Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor     Doctor     @relation(fields: [doctorId], references: [id])
  branch     Branch     @relation(fields: [branchId], references: [id])
  room       Room?      @relation(fields: [roomId], references: [id])

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([doctorId, startsAt])
  @@index([patientId, startsAt])
}

model Encounter {
  id          String     @id @default(cuid())
  patientId   String
  doctorId    String
  branchId    String
  occurredAt  DateTime   @default(now())
  reason      String?
  notes       String?

  patient     Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor     @relation(fields: [doctorId], references: [id])
  branch      Branch     @relation(fields: [branchId], references: [id])

  chartNotes  ChartNote[]
  procedures  Procedure[]
  diagnoses   Diagnosis[]
  media       Media[]
  invoices    Invoice[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([patientId, occurredAt])
}

/* Per-tooth notes (FDI) */
model ChartNote {
  id          String    @id @default(cuid())
  encounterId String
  patientId   String
  toothCode   String?    // FDI code; null = whole mouth
  note        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  encounter   Encounter  @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  patient     Patient    @relation(fields: [patientId], references: [id])

  @@index([patientId, toothCode])
  @@index([encounterId])
}

model Procedure {
  id            String    @id @default(cuid())
  encounterId   String
  patientId     String
  code          String
  name          String
  toothCode     String?
  surface       String?
  quantity      Int       @default(1)
  unitPrice     Decimal   @db.Decimal(12,2)
  discountPct   Decimal?  @db.Decimal(5,2)
  totalAmount   Decimal   @db.Decimal(12,2)

  encounter     Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  patient       Patient   @relation(fields: [patientId], references: [id])
  // added back-relation for InvoiceItem.procedure
  invoiceItems  InvoiceItem[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([patientId])
  @@index([encounterId])
}

model Diagnosis {
  id            String    @id @default(cuid())
  encounterId   String
  patientId     String
  code          String?
  description   String
  toothCode     String?
  isPrimary     Boolean   @default(false)

  encounter     Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  patient       Patient   @relation(fields: [patientId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([patientId])
}

/* ---------- Digital History Book ---------- */

model HistoryBook {
  id          String       @id @default(cuid())
  patientId   String       @unique
  bookNumber  String       @unique
  entries     HistoryEntry[]

  patient     Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model HistoryEntry {
  id            String      @id @default(cuid())
  historyBookId String
  title         String
  details       String?
  attachedId    String?     // optional Media id
  createdAt     DateTime    @default(now())

  book          HistoryBook @relation(fields: [historyBookId], references: [id], onDelete: Cascade)
}

/* ---------- Media ---------- */

model Media {
  id          String     @id @default(cuid())
  patientId   String
  encounterId String?
  toothCode   String?
  kind        MediaKind  @default(OTHER)
  url         String
  caption     String?
  createdAt   DateTime   @default(now())

  patient     Patient    @relation(fields: [patientId], references: [id])
  encounter   Encounter? @relation(fields: [encounterId], references: [id], onDelete: SetNull)

  @@index([patientId, encounterId])
}

/* ---------- Billing ---------- */

model Invoice {
  id           String        @id @default(cuid())
  patientId    String
  encounterId  String?
  branchId     String?
  number       String        @unique
  status       InvoiceStatus @default(UNPAID)
  subtotal     Decimal       @db.Decimal(12,2)
  discount     Decimal?      @db.Decimal(12,2)
  tax          Decimal?      @db.Decimal(12,2)
  total        Decimal       @db.Decimal(12,2)

  items        InvoiceItem[]
  payments     Payment[]
  ebarimt      EBarimtReceipt?

  patient      Patient       @relation(fields: [patientId], references: [id])
  encounter    Encounter?    @relation(fields: [encounterId], references: [id], onDelete: SetNull)
  branch       Branch?       @relation(fields: [branchId], references: [id])

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([patientId])
}

model InvoiceItem {
  id          String     @id @default(cuid())
  invoiceId   String
  procedureId String?
  description String
  quantity    Int        @default(1)
  unitPrice   Decimal    @db.Decimal(12,2)
  total       Decimal    @db.Decimal(12,2)

  invoice     Invoice    @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  procedure   Procedure? @relation(fields: [procedureId], references: [id], onDelete: SetNull)
}

model Payment {
  id            String    @id @default(cuid())
  invoiceId     String
  method        PayMethod
  amount        Decimal   @db.Decimal(12,2)
  paidAt        DateTime  @default(now())

  // QPay fields
  qpayInvoiceId String?
  qpayQrText    String?
  qpayStatus    String?

  invoice       Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model EBarimtReceipt {
  id         String   @id @default(cuid())
  invoiceId  String   @unique
  registerNo String?
  qrData     String?
  lotNumber  String?
  dateIssued DateTime?
  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
